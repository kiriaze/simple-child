/* ============================================
    S I M P L E


 * The template is for rendering single's.
 *
 * @package     Simple
 * @version     1.0
 * @author      Constantine Kiriaze
 * @website     github.com/kiriaze/simple

    Browsers: ie8, ie10, ie11, FF, Safari, Chrome

    Dependancies :

        Variables below defined in _base.scss

            $container-class: 'foo';
            $row-class: 'foo';
            $column-class: 'bar';
            $gutter: 3%; // spacing between columns
            $max-columns: 6; //  @for loop class declarations
            breakpoint mixins

.columns-{percentage, double digit}
    .columns-70, .columns-30 = totaling to 100

.columns-{single digit number}
    .columns-1
    .columns-2, .columns-2
    .columns-4, .columns-4, .columns-4, .columns-4



// // method for %ib layout fix for spacing consider
// @font-face{
//     font-family: 'NoSpace';
//     src: url('../Fonts/zerowidthspaces.eot');
//     src: url('../Fonts/zerowidthspaces.eot?#iefix') format('embedded-opentype'),
//          url('../Fonts/zerowidthspaces.woff') format('woff'),
//          url('../Fonts/zerowidthspaces.ttf') format('truetype'),
//          url('../Fonts/zerowidthspaces.svg#NoSpace') format('svg');
// }

// body {
//     font-face: 'OpenSans', sans-serif;
// }

// .inline-container {
//     font-face: 'NoSpace';
// }

// .inline-container > * {
//     display: inline-block;
//     font-face: 'OpenSans', sans-serif;
// }

============================================ */

//-------------------------------------------------------
// GRID SETTINGS
//-------------------------------------------------------

// this is the fixed gutter between columns
$gutter:            3% !default;
$docWidth:          100% !default;

// this sets your class names
$container-class:   "container" !default; // optional
$row-class:         "row" !default;
$column-class:      "columns" !default;
$max-columns:       12 !default;

// Grid check
$gridDebug:         false !default;


//-------------------------------------------------------
// GRID FUNCTIONS
//-------------------------------------------------------

@function column-width($num, $width) {
    @return ( $width / $num );
}

@function third-width($num, $width) {
    @return $num * ( $width / 3 );
}


//-------------------------------------------------------
// GRID MIXINS
//-------------------------------------------------------

@mixin set-gutter($gutter) {
    @include breakpoint($small) {

        margin-left: -$gutter/2;
        margin-right: -$gutter/2;
        padding-left: $gutter/2;

        @include clearfix();
    }
}

// Centered container element
@mixin container-fixed($gutter: $gutter, $padded: false) {
    position: relative;
    overflow: hidden;
    margin-right: auto;
    margin-left: auto;

    // so edges always have space
    @if ( $padded == true ) {
        padding-left:  ($gutter / 2);
        padding-right: ($gutter / 2);
    }

    @include clearfix();
}

@mixin grid( $display: float, $gutter: $gutter ) {

    box-sizing: border-box;

    @if( $display == 'ib' ) {
        font-size: 0px;
        text-align: justify;
        &:after {
            content: '';
            display: inline-block;
            width: 100%;
        }
    } @else {
        @include set-gutter($gutter);
    }
}

@mixin column() {
    box-sizing: border-box;
    position: relative;
    min-height: 1px;
    width: 100%;
}

@mixin columns($num, $display: float, $gutter: $gutter) {

    @include column();

    // Note: never wrap this with a breakpoint to allow it being wrapped in other styles.
    // e.g. #elem { @include breakpoint($small) { @include columns(2); } }

    @if ( round($num) == $num ) {

        // if whole number for even # cols
        width: column-width($num, $docWidth) - $gutter/2;

        .no-gutter & {
            width: column-width($num, $docWidth);
        }

    } @else {

        // for mixed width cols, data-columns=".3"
        width: ($num * $docWidth) - $gutter/2;

        .no-gutter & {
            width: ($num * $docWidth);
        }

    }

    @if( $display == 'ib' ) {

        display: inline-block;
        vertical-align: top;
        position: relative;
        text-align: left; // reset
        font-size: initial;

    } @else {

        float: left;
        margin-right: $gutter/2;

        .no-gutter & {
            margin-right: 0;
        }

    }

}

@mixin third($num) {
    @include column();
    @include breakpoint($small) {
        width: third-width($num, $docWidth);
    }
}

// set the proportions you want to use
@mixin grid-setup() {

    @for $i from 1 through $max-columns {
        [data-columns='#{$i}'],
        .#{$column-class}-#{$i} {
            @include breakpoint($small) {
                @include columns($i);
            }
        }

    }

    // Percentages for mixed widths
    @for $i from 1 through 10 {
        [data-columns='.#{$i}'],
        .#{$column-class}-#{$i}0 {
            @include breakpoint($small) {
                @include columns($i/10);
            }
        }
    }

}


//-------------------------------------------------------
// CLASS AND DATA DELEGATIONS
//-------------------------------------------------------

[class~='#{$container-class}'],
[data-layout='container'] {

    @include container-fixed($padded: true);

    // fluid grid, but fixed responsiveness - container fixedwidth with breakpoints
    @include breakpoint($small) {
        width: $small;
    }
    @include breakpoint($medium) {
        width: $medium;
    }
    @include breakpoint($large) {
        width: $large;
    }

}

[class~='#{$row-class}'],
[data-layout='grid'] {

    @include grid();

    @if( $gridDebug == true ) {
        background: $black; // testing purposes
    }

}

[class*='#{$column-class}-'],
[data-columns] {
    @if( $gridDebug == true ) {
        background: $yellow; // testing purposes
        padding-top: 1.5rem;
        padding-bottom: 1.5rem;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
        text-align: center;
    }
}

// find a way to reset the value of gutter to also apply to columns etc..
.no-gutter {
    @include set-gutter(0);
}
.reset-gutter {
    @include set-gutter($gutter);
}

// Run grid
@include grid-setup();
